// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test2T.Models;

namespace Test2T.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220609073143_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Test2T.Models.Car", b =>
                {
                    b.Property<int>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.HasKey("IdCar")
                        .HasName("Id_Car");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            IdCar = 1,
                            Name = "Corsa",
                            ProductionYear = 2018
                        });
                });

            modelBuilder.Entity("Test2T.Models.Inspection", b =>
                {
                    b.Property<int>("IdInspection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("IdCar")
                        .HasColumnType("int");

                    b.Property<int?>("IdCarNavIdCar")
                        .HasColumnType("int");

                    b.Property<int>("IdMechanic")
                        .HasColumnType("int");

                    b.Property<int?>("IdMechanicNavIdMechanic")
                        .HasColumnType("int");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdInspection");

                    b.HasIndex("IdCarNavIdCar");

                    b.HasIndex("IdMechanicNavIdMechanic");

                    b.ToTable("Inspection");
                });

            modelBuilder.Entity("Test2T.Models.Mechanic", b =>
                {
                    b.Property<int>("IdMechanic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdMechanic");

                    b.ToTable("Mechanic");
                });

            modelBuilder.Entity("Test2T.Models.ServiceTypeDict", b =>
                {
                    b.Property<int>("IdServiceType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdServiceType");

                    b.ToTable("ServiceTypeDict");
                });

            modelBuilder.Entity("Test2T.Models.ServiceTypeDict_Inspection", b =>
                {
                    b.Property<int>("IdServiceType")
                        .HasColumnType("int");

                    b.Property<int>("IdInspection")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("InspectionIdInspection")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTypeDictIdServiceType")
                        .HasColumnType("int");

                    b.HasKey("IdServiceType", "IdInspection");

                    b.HasIndex("InspectionIdInspection");

                    b.HasIndex("ServiceTypeDictIdServiceType");

                    b.ToTable("ServiceTypeDict_Inspection");
                });

            modelBuilder.Entity("Test2T.Models.Inspection", b =>
                {
                    b.HasOne("Test2T.Models.Car", "IdCarNav")
                        .WithMany("Inspection")
                        .HasForeignKey("IdCarNavIdCar");

                    b.HasOne("Test2T.Models.Mechanic", "IdMechanicNav")
                        .WithMany("Inspection")
                        .HasForeignKey("IdMechanicNavIdMechanic");

                    b.Navigation("IdCarNav");

                    b.Navigation("IdMechanicNav");
                });

            modelBuilder.Entity("Test2T.Models.ServiceTypeDict_Inspection", b =>
                {
                    b.HasOne("Test2T.Models.Inspection", null)
                        .WithMany("ServiceTypeDict_Inspection")
                        .HasForeignKey("InspectionIdInspection");

                    b.HasOne("Test2T.Models.ServiceTypeDict", null)
                        .WithMany("ServiceTypeDict_Inspection")
                        .HasForeignKey("ServiceTypeDictIdServiceType");
                });

            modelBuilder.Entity("Test2T.Models.Car", b =>
                {
                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Test2T.Models.Inspection", b =>
                {
                    b.Navigation("ServiceTypeDict_Inspection");
                });

            modelBuilder.Entity("Test2T.Models.Mechanic", b =>
                {
                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("Test2T.Models.ServiceTypeDict", b =>
                {
                    b.Navigation("ServiceTypeDict_Inspection");
                });
#pragma warning restore 612, 618
        }
    }
}
